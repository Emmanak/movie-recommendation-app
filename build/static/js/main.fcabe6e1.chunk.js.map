{"version":3,"sources":["components/moviecard.tsx","components/movieList.tsx","components/navbar.tsx","components/yourmovies.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MovieCard","props","Card","style","width","Img","variant","src","image","Body","Title","movieName","Text","overview","substring","MovieList","state","movieList","id","title","poster_path","update","this","setState","console","log","className","map","movie","key","toString","React","NavBar","target","charCode","document","getElementById","click","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Form","inline","FormControl","onChange","handleChange","onKeyPress","handleKeyPress","type","placeholder","Button","YourMovies","App","searchQuery","searchList","getPopularMovies","fetch","then","response","json","jsonData","results","catch","error","readInput","event","value","replace","passMovieList","Fragment","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fcabe6e1.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nfunction MovieCard(props: any){\r\n    return ( \r\n        <Card style={{ width: '15rem' }}>\r\n        <Card.Img variant=\"top\" src={props.image}/>\r\n        <Card.Body>\r\n            <Card.Title>{props.movieName}</Card.Title>\r\n            <Card.Text>\r\n            {props.overview.substring(0,65)+\"...\"}\r\n            </Card.Text>\r\n        </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n \r\nexport default MovieCard;","import * as React from 'react';\r\n\r\nimport MovieCard from './moviecard';\r\n\r\nexport interface MovieListProps {\r\n    movieList: Array<any>\r\n    \r\n}\r\n \r\nexport interface MovieListState {\r\n    movieList: Array<any>,\r\n    update: boolean\r\n\r\n\r\n\r\n    \r\n}\r\n \r\nclass MovieList extends React.Component<MovieListProps, MovieListState> {\r\n    state = { \r\n        movieList: [\r\n            {id:\"none\", title:\"none\", image:\"none\", overview:\"none\", poster_path:\"none\"}\r\n        ],\r\n        update: false\r\n    }\r\n    componentDidMount(){\r\n        this.setState({ update: true});\r\n    }\r\n    componentWillUnmount(){\r\n        \r\n    }\r\n    render() {\r\n        console.log(this.props.movieList)\r\n        if(this.state.update === true){\r\n            return ( \r\n                <div id='movieList' className=\"container\">\r\n                    <div id='movies' className=\"row pb-5\">\r\n                        {this.props.movieList.map(movie => <div key={\"movie-\"+movie.id.toString()} className=\"d-flex justify-content-around col-md-4 col-sm-6 col-xs-12 pt-5\"><MovieCard \r\n                        key={movie.id}\r\n                        movieName={movie.title} \r\n                        image={\"https://image.tmdb.org/t/p/w500\"+movie.poster_path}\r\n                        overview={movie.overview}/></div>)}\r\n                    </div>\r\n                    \r\n                </div>\r\n             );\r\n        }\r\n        else{\r\n            console.log(this.state.movieList);\r\n            return(\r\n                <div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}\r\n \r\nexport default MovieList;","import * as React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport interface NavBarProps {\r\n    handleChange: any\r\n    search?: any\r\n}\r\n \r\nexport interface NavBarState {\r\n\r\n}\r\n\r\n\r\n \r\nclass NavBar extends React.Component<NavBarProps, NavBarState> {\r\n\r\n    handleKeyPress(target:any) {\r\n        if(target.charCode === 13){\r\n          var button = document.getElementById(\"searchMoviesButton\") as HTMLButtonElement;\r\n          button.click();\r\n        } \r\n      }\r\n\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"home\">Movie Picker</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"trending\">Trending Movies</Nav.Link>\r\n                        <Nav.Link href=\"your-movies\">Your Movies</Nav.Link>\r\n                        </Nav>\r\n                        <Form inline>\r\n                        <FormControl onChange={this.props.handleChange} onKeyPress={this.handleKeyPress} id=\"movieSearchBar\" type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                        <Button id=\"searchMoviesButton\" variant=\"outline-success\">Search Movies</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                    </Navbar>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import * as React from 'react';\r\n\r\nexport interface YourMoviesProps {\r\n    \r\n}\r\n \r\nexport interface YourMoviesState {\r\n    \r\n}\r\n \r\nclass YourMovies extends React.Component<YourMoviesProps, YourMoviesState> {\r\n    state = {   }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <h1>Your Movies:</h1>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default YourMovies;","import React from 'react';\nimport './App.css';\nimport MovieList from './components/movieList';\nimport NavBar from \"./components/navbar\";\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport YourMovies from './components/yourmovies';\n\n\n\nexport interface AppProps {\n  \n}\n \nexport interface AppState {\n  movieList: Array<any>,\n  searchQuery: string,\n  searchList: Array<any>\n  \n}\n \nclass App extends React.Component<AppProps, AppState> {\n\n  state = { \n    movieList: [],\n    searchQuery: '',\n    searchList: []\n    }\n\n\n  componentDidMount(){\n    this.getPopularMovies();\n  }\n  componentWillUnmount(){\n\n  }\n\n\n  render() {\n\n    //Used to send props with MovieList Component in react-router\n    const passMovieList = () => {\n      return(\n        <MovieList movieList={this.state.movieList}/>\n      );\n    }\n\n    //Pass YourMovies component to react-router\n    const passYourMovies = () => {\n      if(this.state.searchQuery === ''){\n        return(\n          <YourMovies></YourMovies>\n        );\n      }\n      else{\n        return(\n          <MovieList movieList={this.state.movieList}/>\n        );\n      }\n      \n    }\n\n    \n\n    return ( \n      <React.Fragment>\n      <div id='navbar'>\n          <NavBar handleChange={this.readInput}/>\n      </div>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={passMovieList}></Route>\n          <Route path=\"/home\" exact component={passMovieList}></Route>\n          <Route path=\"/trending\" exact component={passMovieList}></Route>\n          <Route path=\"/your-movies\" exact component={passYourMovies}></Route>\n        </Switch>\n      </Router>\n      \n      \n    </React.Fragment>\n     );\n  }\n\n  getPopularMovies = () =>{\n    if(this.state.searchQuery === ''){\n      //get current popular movies from the database\n      fetch('https://api.themoviedb.org/3/movie/popular?api_key=04c67358ca6817bcec69c61716577d76&language=en-US&page=1')\n      .then(response => response.json())\n      .then(jsonData => {\n        // jsonData is parsed json object received from url\n        this.setState({movieList: jsonData.results, searchList: jsonData.results});\n      })\n      .catch((error) => {\n        // handle your errors here\n        console.error(error)\n      })\n    }\n    \n  }\n\n  \n\n  readInput = (event:any) => {\n    if(event.target.value === ''){\n      this.setState({movieList: this.state.searchList});\n      return;\n    }\n    //search database for movies based on user input\n    var searchQuery = event.target.value.replace(/ /g,\"+\");\n    fetch('https://api.themoviedb.org/3/search/movie?api_key=04c67358ca6817bcec69c61716577d76&query='+searchQuery)\n    .then(response => response.json())\n    .then(jsonData => {\n      // jsonData is parsed json object received from url\n      console.log(jsonData.results);\n      this.setState({movieList: jsonData.results});\n    })\n    .catch((error) => {\n      // handle your errors here\n      console.error(error)\n    })\n    this.setState({searchQuery: event.target.value});\n    console.log(this.state.searchQuery);\n  }\n\n\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}