{"version":3,"sources":["images/no_photo_available.png","components/moviecard.tsx","components/movieList.tsx","components/navbar.tsx","components/yourmovies.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","movieOverview","props","undefined","overview","substring","movieImage","image","no_picture_available","MovieCard","Card","style","width","Img","variant","src","Body","Title","movieName","Text","MovieList","state","movieList","id","title","poster_path","update","this","setState","console","log","className","map","movie","key","toString","React","NavBar","target","charCode","document","getElementById","click","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","Form","inline","FormControl","onChange","handleChange","onKeyPress","handleKeyPress","type","placeholder","Button","YourMovies","App","searchQuery","searchList","getPopularMovies","page","Math","round","random","fetch","then","response","json","jsonData","results","catch","error","readInput","event","value","replace","passMovieList","Fragment","path","exact","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ded06e9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no_photo_available.2246dc72.png\";","import * as React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport no_picture_available from '../images/no_photo_available.png';\r\n\r\nfunction MovieCard(props: any){\r\n    return ( \r\n        <Card style={{ width: '15rem' }}>\r\n        <Card.Img variant=\"top\" src={movieImage(props)}/>\r\n        <Card.Body>\r\n            <Card.Title>{props.movieName}</Card.Title>\r\n            <Card.Text>\r\n                {movieOverview(props)}\r\n            \r\n            </Card.Text>\r\n        </Card.Body>\r\n        </Card>\r\n     );\r\n}\r\n\r\nconst movieOverview = (props:any) => {\r\n    if(props.overview !== undefined){\r\n        return props.overview.substring(0,65)+\"...\";\r\n    }\r\n    else{\r\n        return props.overview;\r\n    }\r\n}\r\n\r\nconst movieImage = (props:any) =>{\r\n    const null_URL = 'https://image.tmdb.org/t/p/w500null';\r\n    const undef_URL = 'https://image.tmdb.org/t/p/w500undefined';\r\n    if(props.image === null_URL || props.image === undef_URL){\r\n        //console.log(props.image);\r\n        return no_picture_available;\r\n    }\r\n    else{\r\n        return props.image;\r\n    }\r\n}\r\n \r\nexport default MovieCard;","import * as React from 'react';\r\nimport MovieCard from './moviecard';\r\n\r\nexport interface MovieListProps {\r\n    movieList: Array<any>\r\n    \r\n}\r\n \r\nexport interface MovieListState {\r\n    movieList: Array<any>,\r\n    update: boolean\r\n\r\n\r\n\r\n    \r\n}\r\n \r\nclass MovieList extends React.Component<MovieListProps, MovieListState> {\r\n    state = { \r\n        movieList: [\r\n            {id:\"none\", title:\"none\", image:\"none\", overview:\"none\", poster_path:\"none\"}\r\n        ],\r\n        update: false\r\n    }\r\n    componentDidMount(){\r\n        this.setState({ update: true});\r\n    }\r\n    componentWillUnmount(){\r\n        \r\n    }\r\n    render() {\r\n        console.log(this.props.movieList)\r\n        if(this.state.update === true){\r\n            return (\r\n                <div id='movieList' className=\"container\">\r\n                    <div id='movies' className=\"row pb-5\">\r\n                        {this.props.movieList.map(movie => <div key={\"movie-\"+movie.id.toString()} className=\"d-flex justify-content-around col-md-4 col-sm-6 col-xs-12 pt-5\"><MovieCard \r\n                        key={movie.id}\r\n                        movieName={movie.title} \r\n                        image={\"https://image.tmdb.org/t/p/w500\"+movie.poster_path}\r\n                        overview={movie.overview}/></div>)}\r\n                    </div>\r\n                    \r\n                </div>\r\n             );\r\n        }\r\n        else{\r\n            console.log(this.state.movieList);\r\n            return(\r\n                <div>\r\n                </div>\r\n            );\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n}\r\n \r\nexport default MovieList;","import * as React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport interface NavBarProps {\r\n    handleChange: any\r\n    search?: any\r\n}\r\n \r\nexport interface NavBarState {\r\n\r\n}\r\n\r\n\r\n \r\nclass NavBar extends React.Component<NavBarProps, NavBarState> {\r\n\r\n    handleKeyPress(target:any) {\r\n        if(target.charCode === 13){\r\n          var button = document.getElementById(\"searchMoviesButton\") as HTMLButtonElement;\r\n          button.click();\r\n        } \r\n      }\r\n\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <Navbar bg=\"light\" expand=\"lg\">\r\n                    <Navbar.Brand href=\"home\">Movie Picker</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"trending\">Trending Movies</Nav.Link>\r\n                        <Nav.Link href=\"your-movies\">Your Movies</Nav.Link>\r\n                        </Nav>\r\n                        <Form inline>\r\n                        <FormControl onChange={this.props.handleChange} onKeyPress={this.handleKeyPress} id=\"movieSearchBar\" type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                        <Button id=\"searchMoviesButton\" variant=\"outline-success\">Search Movies</Button>\r\n                        </Form>\r\n                    </Navbar.Collapse>\r\n                    </Navbar>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default NavBar;","import * as React from 'react';\r\n\r\nexport interface YourMoviesProps {\r\n    \r\n}\r\n \r\nexport interface YourMoviesState {\r\n    \r\n}\r\n \r\nclass YourMovies extends React.Component<YourMoviesProps, YourMoviesState> {\r\n    state = {   }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n                <h1>Your Movies:</h1>\r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default YourMovies;","import React from 'react';\r\nimport './App.css';\r\nimport MovieList from './components/movieList';\r\nimport NavBar from \"./components/navbar\";\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport YourMovies from './components/yourmovies';\r\n\r\n\r\n\r\nexport interface AppProps {\r\n  \r\n}\r\n \r\nexport interface AppState {\r\n  movieList: Array<any>,\r\n  searchQuery: string,\r\n  searchList: Array<any>\r\n  \r\n}\r\n \r\nclass App extends React.Component<AppProps, AppState> {\r\n\r\n  state = { \r\n    movieList: [],\r\n    searchQuery: '',\r\n    searchList: []\r\n    }\r\n\r\n\r\n  componentDidMount(){\r\n    this.getPopularMovies();\r\n  }\r\n  componentWillUnmount(){\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    //Used to send props with MovieList Component in react-router\r\n    const passMovieList = () => {\r\n      return(\r\n        <MovieList movieList={this.state.movieList}/>\r\n      );\r\n    }\r\n\r\n    //Pass YourMovies component to react-router\r\n    const passYourMovies = () => {\r\n      if(this.state.searchQuery === ''){\r\n        return(\r\n          <YourMovies></YourMovies>\r\n        );\r\n      }\r\n      else{\r\n        return(\r\n          <MovieList movieList={this.state.movieList}/>\r\n        );\r\n      }\r\n      \r\n    }\r\n\r\n    \r\n\r\n    return ( \r\n      <React.Fragment>\r\n      <div id='navbar'>\r\n          <NavBar handleChange={this.readInput}/>\r\n      </div>\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact component={passMovieList}></Route>\r\n          <Route path=\"/home\" exact component={passMovieList}></Route>\r\n          <Route path=\"/trending\" exact component={passMovieList}></Route>\r\n          <Route path=\"/your-movies\" exact component={passYourMovies}></Route>\r\n        </Switch>\r\n      </Router>\r\n      \r\n      \r\n    </React.Fragment>\r\n     );\r\n  }\r\n\r\n  getPopularMovies = () =>{\r\n    const query = {\r\n      popular: 'https://api.themoviedb.org/3/movie/popular?api_key=04c67358ca6817bcec69c61716577d76&language=en-US&page=',\r\n      trending: 'https://api.themoviedb.org/3/trending/all/day?api_key=04c67358ca6817bcec69c61716577d76&language=en-US&page=',\r\n      multi: 'https://api.themoviedb.org/3/search/multi?api_key=04c67358ca6817bcec69c61716577d76&language=en-US&include_adult=false&page=1&query=family'\r\n    }\r\n    var page : string = Math.round(Math.random() * 10).toString();\r\n    if(this.state.searchQuery === ''){\r\n      //get current popular movies from the database\r\n      fetch(query.trending + page)\r\n      .then(response => response.json())\r\n      .then(jsonData => {\r\n        // jsonData is parsed json object received from url\r\n        this.setState({movieList: jsonData.results, searchList: jsonData.results});\r\n      })\r\n      .catch((error) => {\r\n        // handle your errors here\r\n        console.error(error)\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  \r\n\r\n  readInput = (event:any) => {\r\n    if(event.target.value === ''){\r\n      this.setState({movieList: this.state.searchList});\r\n      return;\r\n    }\r\n    //search database for movies based on user input\r\n    var searchQuery = event.target.value.replace(/ /g,\"+\");\r\n    fetch('https://api.themoviedb.org/3/search/multi?api_key=04c67358ca6817bcec69c61716577d76&language=en-US&include_adult=false&page=1&query='+searchQuery)\r\n    .then(response => response.json())\r\n    .then(jsonData => {\r\n      // jsonData is parsed json object received from url\r\n      console.log(jsonData.results);\r\n      this.setState({movieList: jsonData.results});\r\n    })\r\n    .catch((error) => {\r\n      // handle your errors here\r\n      console.error(error)\r\n    })\r\n    this.setState({searchQuery: event.target.value});\r\n    console.log(this.state.searchQuery);\r\n  }\r\n\r\n\r\n}\r\n \r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}